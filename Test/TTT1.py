# 热情的X星人和友好的地球人一起联手发现了一堆千年宝藏。大家一起对这堆宝藏中的每一件宝贝进行了估值，每件宝贝的估值都是一个正整数，一共有n件宝贝。已知每一件宝贝都是独一无二的，且都不可分割。当然，可能存在某些宝贝的估值相等。 为了体现公平性，X星人和地球人决定按照估值来平分宝藏，要求X星人和地球人所分得的宝贝的估值之和相等。 现在给出这n件宝贝的估值，你能否编写一个程序计算出有多少种公平分配的方案？ 如果不存在公平分配方案，则输出“No solution!”。
# 输入描述
# 单组输入。 第1行输入一个正整数n，表示宝贝的总数量。(n<=10^3) 第2行输入n个正整数，分别表示每一件宝贝的估值。两两之间用空格隔开。

# 输出描述
# 输出公平分配的方案总数，结果对1e9+7(即1 000 000 007)取模。如果不存在公平分配方案，输出“No solution!”。

N = 5
nums = [1, 2, 2, 3, 4]


def splitnums(N,nums):
    Sum = sum(nums)
    if N <= 1 or Sum % 2 !=0:
        return str('No solution!')
    tar = Sum // 2
    dp = [False] * (tar+1)
    dp[0] = True
    for j in nums:
        for i in range(tar,j-1,-1):
            dp[i] = dp[i] or dp[i-j]
            # ans.append()
    # if dp[tar] == True:
    #     res += 1
    return dp[tar]



# 题目描述：
# 有n只怪兽，小明打败怪兽会去法师那里得到一些悬赏。现在用一个长度为n的整数数组表示悬赏的数值。数组中包含负数，因为有些怪兽是善良的，小明伤害他们要赔偿。法师那里记录了小明的累计悬赏值x，小明打败任意一只怪兽，可以从法师那里领取数值等于其累计贡献值x的金币，同时如果这只怪兽的悬赏值是y，那么法师会在给出金币之后将小明的累计悬赏值修改成x+y。小明有一个特殊技能，可以在任意时间将法师那里的累计悬赏值清零。现在小明有k次清零的机会，起始的累计悬赏值是0，他需要打败所有怪兽，他可以自由决定打怪的顺序，他最多可以得到多少金币？



# 输入描述
# 第一行两个整数n,k，1<=n,k<=100000

# 第二行n个整数，其中任意一个数大小范围是[-1000000,1000000]。

# 数字间用空格隔开

# 输出描述
# 一个整数，表示最大的金币获得数。